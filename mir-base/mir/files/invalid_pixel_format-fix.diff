=== modified file 'examples/demo-shell/window_manager.cpp'
--- examples/demo-shell/window_manager.cpp	2014-01-21 10:15:36 +0000
+++ examples/demo-shell/window_manager.cpp	2014-02-13 09:52:24 +0000
@@ -140,23 +140,14 @@
         {
             compositor->stop();
             auto conf = display->configuration();
-            conf->for_each_output([&](mg::DisplayConfigurationOutput const& output) -> void
-            {
-                MirPowerMode power_mode;
-                if (!output.used) return;
-
-                if (display_off == true)
-                    power_mode = mir_power_mode_on;
-                else
-                    power_mode = mir_power_mode_off;
-
-                conf->configure_output(output.id, output.used,
-                                       output.top_left,
-                                       output.current_mode_index,
-                                       output.current_format,
-                                       power_mode,
-                                       output.orientation);
-            });
+            MirPowerMode new_power_mode = display_off ?
+                mir_power_mode_on : mir_power_mode_off;
+            conf->for_each_output(
+                [&](mg::UserDisplayConfigurationOutput& output) -> void
+                {
+                    output.power_mode = new_power_mode;
+                }
+            );
             display_off = !display_off;
 
             display->configure(*conf.get());
@@ -184,14 +175,9 @@
                 compositor->stop();
                 auto conf = display->configuration();
                 conf->for_each_output(
-                    [&](mg::DisplayConfigurationOutput const& output) -> void
+                    [&](mg::UserDisplayConfigurationOutput& output) -> void
                     {
-                        conf->configure_output(output.id, output.used,
-                                               output.top_left,
-                                               output.current_mode_index,
-                                               output.current_format,
-                                               output.power_mode,
-                                               orientation);
+                        output.orientation = orientation;
                     }
                 );
                 display->configure(*conf);

=== modified file 'examples/pixel_format_selector.cpp'
--- examples/pixel_format_selector.cpp	2014-01-15 03:28:24 +0000
+++ examples/pixel_format_selector.cpp	2014-02-13 09:52:24 +0000
@@ -40,7 +40,7 @@
 {
     base_policy->apply_to(conf);
     conf.for_each_output(
-        [&](graphics::DisplayConfigurationOutput const& conf_output)
+        [&](graphics::UserDisplayConfigurationOutput& conf_output)
         {
             if (!conf_output.connected || !conf_output.used) return;
 
@@ -56,12 +56,7 @@
             if (pos == conf_output.pixel_formats.end())
                 return;
 
-            conf.configure_output(conf_output.id, true, conf_output.top_left,
-                                  conf_output.current_mode_index,
-                                  *pos,
-                                  conf_output.power_mode,
-                                  conf_output.orientation
-                                 );
+            conf_output.current_format = *pos;
         });
 }
 

=== modified file 'examples/server_configuration.cpp'
--- examples/server_configuration.cpp	2014-01-30 07:17:36 +0000
+++ examples/server_configuration.cpp	2014-02-13 09:52:24 +0000
@@ -55,28 +55,23 @@
             });
 
         conf.for_each_output(
-            [&](mg::DisplayConfigurationOutput const& conf_output)
+            [&](mg::UserDisplayConfigurationOutput& conf_output)
             {
                 if (conf_output.connected && conf_output.modes.size() > 0 &&
                     available_outputs_for_card[conf_output.card_id] > 0)
                 {
-                    conf.configure_output(conf_output.id, true,
-                                          geom::Point{max_x, 0},
-                                          preferred_mode_index,
-                                          conf_output.current_format,
-                                          mir_power_mode_on,
-                                          mir_orientation_normal);
+                    conf_output.used = true;
+                    conf_output.top_left = geom::Point{max_x, 0};
+                    conf_output.current_mode_index = preferred_mode_index;
+                    conf_output.power_mode = mir_power_mode_on;
+                    conf_output.orientation = mir_orientation_normal;
                     max_x += conf_output.modes[preferred_mode_index].size.width.as_int();
                     --available_outputs_for_card[conf_output.card_id];
                 }
                 else
                 {
-                    conf.configure_output(conf_output.id, false,
-                                          conf_output.top_left,
-                                          conf_output.current_mode_index,
-                                          conf_output.current_format,
-                                          mir_power_mode_on,
-                                          mir_orientation_normal);
+                    conf_output.used = false;
+                    conf_output.power_mode = mir_power_mode_off;
                 }
             });
     }
@@ -91,26 +86,20 @@
         bool done{false};
 
         conf.for_each_output(
-            [&](mg::DisplayConfigurationOutput const& conf_output)
+            [&](mg::UserDisplayConfigurationOutput& conf_output)
             {
                 if (!done && conf_output.connected && conf_output.modes.size() > 0)
                 {
-                    conf.configure_output(conf_output.id, true,
-                                          geom::Point{0, 0},
-                                          preferred_mode_index,
-                                          conf_output.current_format,
-                                          mir_power_mode_on,
-                                          mir_orientation_normal);
+                    conf_output.used = true;
+                    conf_output.top_left = geom::Point{0, 0};
+                    conf_output.current_mode_index = preferred_mode_index;
+                    conf_output.power_mode = mir_power_mode_on;
                     done = true;
                 }
                 else
                 {
-                    conf.configure_output(conf_output.id, false,
-                                          conf_output.top_left,
-                                          conf_output.current_mode_index,
-                                          conf_output.current_format,
-                                          mir_power_mode_on,
-                                          mir_orientation_normal);
+                    conf_output.used = false;
+                    conf_output.power_mode = mir_power_mode_off;
                 }
             });
     }

=== modified file 'include/platform/mir/graphics/display_configuration.h'
--- include/platform/mir/graphics/display_configuration.h	2014-01-13 06:12:33 +0000
+++ include/platform/mir/graphics/display_configuration.h	2014-02-13 09:52:24 +0000
@@ -114,6 +114,31 @@
     /** The logical rectangle occupied by the output, based on its position,
         current mode and orientation (rotation) */
     geometry::Rectangle extents() const;
+    bool valid() const;
+};
+
+/**
+ * Mirror of a DisplayConfigurationOutput, with some fields limited to
+ * being read-only, preventing users from changing things they shouldn't.
+ */
+struct UserDisplayConfigurationOutput
+{
+    DisplayConfigurationOutputId const& id;
+    DisplayConfigurationCardId const& card_id;
+    DisplayConfigurationOutputType const& type;
+    std::vector<MirPixelFormat> const& pixel_formats;
+    std::vector<DisplayConfigurationMode> const& modes;
+    size_t const& preferred_mode_index;
+    geometry::Size const& physical_size_mm;
+    bool const& connected;
+    bool& used;
+    geometry::Point& top_left;
+    size_t& current_mode_index;
+    MirPixelFormat& current_format;
+    MirPowerMode& power_mode;
+    MirOrientation& orientation;
+
+    UserDisplayConfigurationOutput(DisplayConfigurationOutput& master);
 };
 
 std::ostream& operator<<(std::ostream& out, DisplayConfigurationCard const& val);
@@ -140,13 +165,8 @@
     virtual void for_each_card(std::function<void(DisplayConfigurationCard const&)> f) const = 0;
     /** Executes a function object for each output in the configuration. */
     virtual void for_each_output(std::function<void(DisplayConfigurationOutput const&)> f) const = 0;
-
-    /** Configures an output. */
-    virtual void configure_output(DisplayConfigurationOutputId id, bool used,
-                                  geometry::Point top_left, size_t mode_index,
-                                  MirPixelFormat format,
-                                  MirPowerMode power_mode,
-                                  MirOrientation orientation) = 0;
+    virtual void for_each_output(std::function<void(UserDisplayConfigurationOutput&)> f) = 0;
+    virtual bool valid() const;
 
 protected:
     DisplayConfiguration() = default;

=== modified file 'include/test/mir_test_doubles/null_display_configuration.h'
--- include/test/mir_test_doubles/null_display_configuration.h	2014-01-13 04:16:45 +0000
+++ include/test/mir_test_doubles/null_display_configuration.h	2014-02-13 09:52:24 +0000
@@ -35,7 +35,7 @@
     void for_each_output(std::function<void(graphics::DisplayConfigurationOutput const&)>) const override
     {
     }
-    void configure_output(graphics::DisplayConfigurationOutputId, bool, geometry::Point, size_t, MirPixelFormat, MirPowerMode, MirOrientation) override
+    void for_each_output(std::function<void(graphics::UserDisplayConfigurationOutput&)>) override
     {
     }
 };

=== modified file 'include/test/mir_test_doubles/stub_display_configuration.h'
--- include/test/mir_test_doubles/stub_display_configuration.h	2014-02-10 09:38:32 +0000
+++ include/test/mir_test_doubles/stub_display_configuration.h	2014-02-13 09:52:24 +0000
@@ -156,8 +156,13 @@
         }
     }
 
-    void configure_output(graphics::DisplayConfigurationOutputId, bool, geometry::Point, size_t, MirPixelFormat, MirPowerMode, MirOrientation) override
+    void for_each_output(std::function<void(graphics::UserDisplayConfigurationOutput&)> f) override
     {
+        for (auto& disp : outputs)
+        {
+            graphics::UserDisplayConfigurationOutput user(disp);
+            f(user);
+        }
     }
 
     std::vector<graphics::DisplayConfigurationCard> cards;

=== modified file 'src/platform/graphics/android/android_display.cpp'
--- src/platform/graphics/android/android_display.cpp	2014-01-31 07:48:24 +0000
+++ src/platform/graphics/android/android_display.cpp	2014-02-13 09:52:24 +0000
@@ -27,6 +27,8 @@
 #include "display_device.h"
 #include "mir/geometry/rectangle.h"
 
+#include <boost/throw_exception.hpp>
+
 namespace mga=mir::graphics::android;
 namespace mg=mir::graphics;
 namespace geom=mir::geometry;
@@ -61,6 +63,12 @@
 
 void mga::AndroidDisplay::configure(mg::DisplayConfiguration const& configuration)
 {
+    if (!configuration.valid())
+    {
+        BOOST_THROW_EXCEPTION(
+            std::logic_error("Invalid or inconsistent display configuration"));
+    }
+
     MirOrientation orientation = mir_orientation_normal;
 
     configuration.for_each_output([&](mg::DisplayConfigurationOutput const& output)

=== modified file 'src/platform/graphics/android/android_display_configuration.cpp'
--- src/platform/graphics/android/android_display_configuration.cpp	2014-01-28 05:21:25 +0000
+++ src/platform/graphics/android/android_display_configuration.cpp	2014-02-13 09:52:24 +0000
@@ -68,10 +68,9 @@
     f(configuration);
 }
 
-void mga::AndroidDisplayConfiguration::configure_output(
-    mg::DisplayConfigurationOutputId, bool, geom::Point, size_t,
-    MirPixelFormat, MirPowerMode power_mode, MirOrientation orientation)
+void mga::AndroidDisplayConfiguration::for_each_output(std::function<void(mg::UserDisplayConfigurationOutput&)> f)
 {
-    configuration.power_mode = power_mode;
-    configuration.orientation = orientation;
+    mg::UserDisplayConfigurationOutput user(configuration);
+    f(user);
 }
+

=== modified file 'src/platform/graphics/android/android_display_configuration.h'
--- src/platform/graphics/android/android_display_configuration.h	2014-01-13 06:12:33 +0000
+++ src/platform/graphics/android/android_display_configuration.h	2014-02-13 09:52:24 +0000
@@ -37,10 +37,7 @@
 
     void for_each_card(std::function<void(DisplayConfigurationCard const&)> f) const override;
     void for_each_output(std::function<void(DisplayConfigurationOutput const&)> f) const override;
-    void configure_output(DisplayConfigurationOutputId id, bool used,
-                          geometry::Point top_left, size_t mode_index,
-                          MirPixelFormat format, MirPowerMode power_mode,
-                          MirOrientation) override;
+    void for_each_output(std::function<void(UserDisplayConfigurationOutput&)> f) override;
 
 private:
     DisplayConfigurationOutput configuration;

=== modified file 'src/platform/graphics/display_configuration.cpp'
--- src/platform/graphics/display_configuration.cpp	2014-01-10 08:40:50 +0000
+++ src/platform/graphics/display_configuration.cpp	2014-02-13 09:52:24 +0000
@@ -19,6 +19,7 @@
 #include "mir/graphics/display_configuration.h"
 
 #include <ostream>
+#include <algorithm>
 
 namespace mg = mir::graphics;
 
@@ -196,3 +197,52 @@
         return {top_left, {size.height.as_int(), size.width.as_int()}};
     }
 }
+
+bool mg::DisplayConfigurationOutput::valid() const
+{
+    if (!connected)
+        return !used;
+
+    auto const& f = std::find(pixel_formats.begin(), pixel_formats.end(),
+                              current_format);
+    if (f == pixel_formats.end())
+        return false;
+
+    auto nmodes = modes.size();
+    if (preferred_mode_index >= nmodes || current_mode_index >= nmodes)
+        return false;
+
+    return true;
+}
+
+bool mg::DisplayConfiguration::valid() const
+{
+    bool all_valid = true;
+
+    for_each_output([&all_valid](DisplayConfigurationOutput const& out)
+        {
+            if (!out.valid())
+                all_valid = false;
+        });
+
+    return all_valid;
+}
+
+mg::UserDisplayConfigurationOutput::UserDisplayConfigurationOutput(
+    DisplayConfigurationOutput& master) :
+        id(master.id),
+        card_id(master.card_id),
+        type(master.type),
+        pixel_formats(master.pixel_formats),
+        modes(master.modes),
+        preferred_mode_index(master.preferred_mode_index),
+        physical_size_mm(master.physical_size_mm),
+        connected(master.connected),
+        used(master.used),
+        top_left(master.top_left),
+        current_mode_index(master.current_mode_index),
+        current_format(master.current_format),
+        power_mode(master.power_mode),
+        orientation(master.orientation)
+{
+}

=== modified file 'src/platform/graphics/mesa/display.cpp'
--- src/platform/graphics/mesa/display.cpp	2014-02-10 08:47:48 +0000
+++ src/platform/graphics/mesa/display.cpp	2014-02-13 09:52:24 +0000
@@ -128,6 +128,12 @@
 
 void mgm::Display::configure(mg::DisplayConfiguration const& conf)
 {
+    if (!conf.valid())
+    {
+        BOOST_THROW_EXCEPTION(
+            std::logic_error("Invalid or inconsistent display configuration"));
+    }
+
     {
         std::lock_guard<std::mutex> lg{configuration_mutex};
 

=== modified file 'src/platform/graphics/mesa/real_kms_display_configuration.cpp'
--- src/platform/graphics/mesa/real_kms_display_configuration.cpp	2014-01-14 07:16:04 +0000
+++ src/platform/graphics/mesa/real_kms_display_configuration.cpp	2014-02-13 09:52:24 +0000
@@ -66,11 +66,6 @@
     return static_cast<mg::DisplayConfigurationOutputType>(connector_type);
 }
 
-bool format_available_in_pixel_formats(MirPixelFormat format, mg::DisplayConfigurationOutput const& output)
-{
-    return output.pixel_formats.end() != find(output.pixel_formats.begin(), output.pixel_formats.end(), format);
-}
-
 }
 
 mgm::RealKMSDisplayConfiguration::RealKMSDisplayConfiguration(int drm_fd)
@@ -112,36 +107,13 @@
         f(output);
 }
 
-void mgm::RealKMSDisplayConfiguration::configure_output(
-    DisplayConfigurationOutputId id, bool used,
-    geometry::Point top_left, size_t mode_index,
-    MirPixelFormat format, MirPowerMode power_mode, MirOrientation orientation)
+void mgm::RealKMSDisplayConfiguration::for_each_output(
+    std::function<void(UserDisplayConfigurationOutput&)> f)
 {
-    auto iter = find_output_with_id(id);
-
-    if (iter != outputs.end())
-    {
-        auto& output = *iter;
-
-        if (used && mode_index >= output.modes.size())
-            BOOST_THROW_EXCEPTION(std::runtime_error("Invalid mode_index for used output"));
-
-        if (used && !valid_pixel_format(format))
-            BOOST_THROW_EXCEPTION(std::runtime_error("Invalid format for used output"));
-
-        if (used && !format_available_in_pixel_formats(format, output))
-            BOOST_THROW_EXCEPTION(std::runtime_error("Format not available for used output"));
-
-        output.used = used;
-        output.top_left = top_left;
-        output.current_mode_index = mode_index;
-        output.current_format = format;
-        output.power_mode = power_mode;
-        output.orientation = orientation;
-    }
-    else
-    {
-        BOOST_THROW_EXCEPTION(std::runtime_error("Trying to configure invalid output"));
+    for (auto& output : outputs)
+    {
+        UserDisplayConfigurationOutput user(output);
+        f(user);
     }
 }
 

=== modified file 'src/platform/graphics/mesa/real_kms_display_configuration.h'
--- src/platform/graphics/mesa/real_kms_display_configuration.h	2014-01-13 06:12:33 +0000
+++ src/platform/graphics/mesa/real_kms_display_configuration.h	2014-02-13 09:52:24 +0000
@@ -39,10 +39,7 @@
 
     void for_each_card(std::function<void(DisplayConfigurationCard const&)> f) const override;
     void for_each_output(std::function<void(DisplayConfigurationOutput const&)> f) const override;
-    void configure_output(DisplayConfigurationOutputId id, bool used,
-                          geometry::Point top_left, size_t mode_index,
-                          MirPixelFormat format, MirPowerMode power_mode,
-                          MirOrientation orientation) override;
+    void for_each_output(std::function<void(UserDisplayConfigurationOutput&)> f) override;
 
     uint32_t get_kms_connector_id(DisplayConfigurationOutputId id) const;
     size_t get_kms_mode_index(DisplayConfigurationOutputId id, size_t conf_mode_index) const;

=== modified file 'src/server/frontend/session_mediator.cpp'
--- src/server/frontend/session_mediator.cpp	2014-02-10 10:56:56 +0000
+++ src/server/frontend/session_mediator.cpp	2014-02-13 09:52:24 +0000
@@ -329,22 +329,22 @@
         report->session_configure_display_called(session->name());
 
         auto config = display_changer->active_configuration();
-        for (auto i=0; i < request->display_output_size(); i++)
-        {
-            auto& output = request->display_output(i);
-            mg::DisplayConfigurationOutputId output_id{static_cast<int>(output.output_id())};
-            config->configure_output(output_id, output.used(),
-                                     geom::Point{output.position_x(),
-                                                 output.position_y()},
-                                     output.current_mode(),
-                                     static_cast<MirPixelFormat>(
-                                         output.current_format()),
-                                     static_cast<MirPowerMode>(
-                                         output.power_mode()),
-                                     static_cast<MirOrientation>(
-                                         output.orientation())
-                                     );
-        }
+
+        config->for_each_output([&](mg::UserDisplayConfigurationOutput& dest){
+            int id = dest.id.as_value();
+            if (id < 0 || id >= request->display_output_size())
+                return;
+
+            auto& src = request->display_output(id);
+            dest.used = src.used();
+            dest.top_left = geom::Point{src.position_x(),
+                                        src.position_y()};
+            dest.current_mode_index = src.current_mode();
+            dest.current_format =
+                static_cast<MirPixelFormat>(src.current_format());
+            dest.power_mode = static_cast<MirPowerMode>(src.power_mode());
+            dest.orientation = static_cast<MirOrientation>(src.orientation());
+        });
 
         display_changer->configure(session, config);
         auto display_config = display_changer->active_configuration();

=== modified file 'src/server/graphics/default_display_configuration_policy.cpp'
--- src/server/graphics/default_display_configuration_policy.cpp	2014-01-13 06:12:33 +0000
+++ src/server/graphics/default_display_configuration_policy.cpp	2014-02-13 09:52:24 +0000
@@ -76,26 +76,25 @@
         });
 
     conf.for_each_output(
-        [&](DisplayConfigurationOutput const& conf_output)
+        [&](UserDisplayConfigurationOutput& conf_output)
         {
             if (!conf_output.connected || conf_output.modes.empty() ||
                 available_outputs_for_card[conf_output.card_id] == 0)
             {
-                conf.configure_output(conf_output.id, false,
-                                      conf_output.top_left,
-                                      conf_output.current_mode_index,
-                                      conf_output.current_format,
-                                      default_power_state,
-                                      conf_output.orientation);
+                conf_output.used = false;
+                conf_output.power_mode = default_power_state;
                 return;
             }
 
             size_t preferred_mode_index{select_mode_index(conf_output.preferred_mode_index, conf_output.modes)};
             MirPixelFormat format{select_opaque_format(conf_output.current_format, conf_output.pixel_formats)};
 
-            conf.configure_output(conf_output.id, true, geom::Point(),
-                                  preferred_mode_index, format,
-                                  default_power_state, mir_orientation_normal);
+            conf_output.used = true;
+            conf_output.top_left = geom::Point{0, 0};
+            conf_output.current_mode_index = preferred_mode_index;
+            conf_output.current_format = format;
+            conf_output.power_mode = default_power_state;
+            conf_output.orientation = mir_orientation_normal;
 
             --available_outputs_for_card[conf_output.card_id];
         });

=== modified file 'src/server/graphics/nested/nested_display.cpp'
--- src/server/graphics/nested/nested_display.cpp	2014-01-31 07:48:24 +0000
+++ src/server/graphics/nested/nested_display.cpp	2014-02-13 09:52:24 +0000
@@ -171,6 +171,12 @@
 
 void mgn::NestedDisplay::configure(mg::DisplayConfiguration const& configuration)
 {
+    if (!configuration.valid())
+    {
+        BOOST_THROW_EXCEPTION(
+            std::logic_error("Invalid or inconsistent display configuration"));
+    }
+
     decltype(outputs) result;
 
     // TODO for proper mirrored mode support we will need to detect overlapping outputs and

=== modified file 'src/server/graphics/nested/nested_display_configuration.cpp'
--- src/server/graphics/nested/nested_display_configuration.cpp	2014-01-13 06:32:38 +0000
+++ src/server/graphics/nested/nested_display_configuration.cpp	2014-02-13 09:52:24 +0000
@@ -29,16 +29,6 @@
 namespace mg = mir::graphics;
 namespace mgn = mg::nested;
 
-namespace
-{
-bool format_valid_for_output(MirDisplayOutput const& output, MirPixelFormat format)
-{
-    MirPixelFormat * end = output.output_formats + output.num_output_formats;
-    return end != std::find(output.output_formats, end, format);
-}
-
-}
-
 mgn::NestedDisplayConfiguration::NestedDisplayConfiguration(MirDisplayConfiguration* connection) :
 display_config{connection}
 {
@@ -97,36 +87,66 @@
         });
 }
 
-void mgn::NestedDisplayConfiguration::configure_output(
-    DisplayConfigurationOutputId id, bool used, geometry::Point top_left,
-    size_t mode_index, MirPixelFormat format, MirPowerMode power_mode,
-    MirOrientation orientation)
+void mgn::NestedDisplayConfiguration::for_each_output(
+    std::function<void(UserDisplayConfigurationOutput&)> f)
 {
-    for (auto mir_output = display_config->outputs;
-        mir_output != display_config->outputs+display_config->num_outputs;
-        ++mir_output)
-    {
-        if (DisplayConfigurationOutputId(mir_output->output_id) == id)
+    // This is mostly copied and pasted from the const version above, but this
+    // mutable version copies user-changes to the output structure at the end.
+
+    std::for_each(
+        display_config->outputs,
+        display_config->outputs+display_config->num_outputs,
+        [&f](MirDisplayOutput& mir_output)
         {
-            if (used && mode_index >= mir_output->num_modes)
-                BOOST_THROW_EXCEPTION(std::runtime_error("Invalid mode_index for used output"));
-
-            if (used && !mg::valid_pixel_format(format))
-                BOOST_THROW_EXCEPTION(std::runtime_error("Invalid format for used output"));
-
-            if (used && !format_valid_for_output(*mir_output, format))
-                BOOST_THROW_EXCEPTION(std::runtime_error("Format not available for used output"));
-
-            mir_output->used = used;
-            mir_output->position_x = top_left.x.as_uint32_t();
-            mir_output->position_y = top_left.y.as_uint32_t();
-            mir_output->current_mode = mode_index;
-            mir_output->current_format = format;
-            mir_output->power_mode = power_mode;
-            mir_output->orientation = orientation;
-            return;
-        }
-    }
-    BOOST_THROW_EXCEPTION(std::runtime_error("Trying to configure invalid output"));
+            std::vector<MirPixelFormat> formats;
+            formats.reserve(mir_output.num_output_formats);
+            for (auto p = mir_output.output_formats;
+                 p != mir_output.output_formats+mir_output.num_output_formats;
+                 ++p)
+            {
+                formats.push_back(*p);
+            }
+
+            std::vector<DisplayConfigurationMode> modes;
+            modes.reserve(mir_output.num_modes);
+            for (auto p = mir_output.modes;
+                 p != mir_output.modes+mir_output.num_modes;
+                 ++p)
+            {
+                modes.push_back(
+                    DisplayConfigurationMode{
+                        {p->horizontal_resolution, p->vertical_resolution},
+                        p->refresh_rate});
+            }
+
+            DisplayConfigurationOutput output{
+                DisplayConfigurationOutputId(mir_output.output_id),
+                DisplayConfigurationCardId(mir_output.card_id),
+                DisplayConfigurationOutputType(mir_output.type),
+                std::move(formats),
+                std::move(modes),
+                mir_output.preferred_mode,
+                geometry::Size{mir_output.physical_width_mm,
+                               mir_output.physical_height_mm},
+                !!mir_output.connected,
+                !!mir_output.used,
+                geometry::Point{mir_output.position_x, mir_output.position_y},
+                mir_output.current_mode,
+                mir_output.current_format,
+                mir_output.power_mode,
+                mir_output.orientation
+            };
+            UserDisplayConfigurationOutput user(output);
+
+            f(user);
+
+            mir_output.current_mode = output.current_mode_index;
+            mir_output.current_format = output.current_format;
+            mir_output.position_x = output.top_left.x.as_int();
+            mir_output.position_y = output.top_left.y.as_int();
+            mir_output.used = output.used;
+            mir_output.power_mode = output.power_mode;
+            mir_output.orientation = output.orientation;
+        });
 }
 

=== modified file 'src/server/graphics/nested/nested_display_configuration.h'
--- src/server/graphics/nested/nested_display_configuration.h	2014-01-13 04:16:45 +0000
+++ src/server/graphics/nested/nested_display_configuration.h	2014-02-13 09:52:24 +0000
@@ -36,11 +36,7 @@
 
     void for_each_card(std::function<void(DisplayConfigurationCard const&)>) const override;
     void for_each_output(std::function<void(DisplayConfigurationOutput const&)>) const override;
-
-    void configure_output(DisplayConfigurationOutputId id, bool used,
-                          geometry::Point top_left, size_t mode_index,
-                          MirPixelFormat format, MirPowerMode power_mode,
-                          MirOrientation orientation) override;
+    void for_each_output(std::function<void(UserDisplayConfigurationOutput&)>) override;
 
     operator MirDisplayConfiguration*() const { return display_config; }
 private:

=== modified file 'src/server/graphics/offscreen/display.cpp'
--- src/server/graphics/offscreen/display.cpp	2014-01-31 07:48:24 +0000
+++ src/server/graphics/offscreen/display.cpp	2014-02-13 09:52:24 +0000
@@ -118,6 +118,12 @@
 
 void mgo::Display::configure(mg::DisplayConfiguration const& conf)
 {
+    if (!conf.valid())
+    {
+        BOOST_THROW_EXCEPTION(
+            std::logic_error("Invalid or inconsistent display configuration"));
+    }
+
     std::lock_guard<std::mutex> lock{configuration_mutex};
 
     display_buffers.clear();

=== modified file 'src/server/graphics/offscreen/display_configuration.cpp'
--- src/server/graphics/offscreen/display_configuration.cpp	2014-01-13 06:12:33 +0000
+++ src/server/graphics/offscreen/display_configuration.cpp	2014-02-13 09:52:24 +0000
@@ -69,8 +69,10 @@
     f(output);
 }
 
-void mgo::DisplayConfiguration::configure_output(
-    mg::DisplayConfigurationOutputId, bool, geom::Point, size_t,
-    MirPixelFormat, MirPowerMode, MirOrientation)
+void mgo::DisplayConfiguration::for_each_output(
+    std::function<void(mg::UserDisplayConfigurationOutput&)> f)
 {
+    mg::UserDisplayConfigurationOutput user(output);
+    f(user);
 }
+

=== modified file 'src/server/graphics/offscreen/display_configuration.h'
--- src/server/graphics/offscreen/display_configuration.h	2014-01-13 04:16:45 +0000
+++ src/server/graphics/offscreen/display_configuration.h	2014-02-13 09:52:24 +0000
@@ -35,11 +35,7 @@
 
     void for_each_card(std::function<void(DisplayConfigurationCard const&)> f) const override;
     void for_each_output(std::function<void(DisplayConfigurationOutput const&)> f) const override;
-    virtual void configure_output(DisplayConfigurationOutputId id, bool used,
-                                  geometry::Point top_left,
-                                  size_t mode_index, MirPixelFormat format,
-                                  MirPowerMode power_mode,
-                                  MirOrientation orientation) override;
+    void for_each_output(std::function<void(UserDisplayConfigurationOutput&)> f) override;
 
 private:
     DisplayConfigurationOutput output;

=== modified file 'src/server/scene/mediating_display_changer.cpp'
--- src/server/scene/mediating_display_changer.cpp	2014-01-13 06:12:33 +0000
+++ src/server/scene/mediating_display_changer.cpp	2014-02-13 09:52:24 +0000
@@ -126,19 +126,14 @@
     if (it == config_map.end())
         return;
     auto conf = it->second;
-    conf->for_each_output([&](mg::DisplayConfigurationOutput const& output) -> void
+    conf->for_each_output([&](mg::UserDisplayConfigurationOutput& output) -> void
     {
         if (!output.used) return;
 
         if (output.power_mode != mir_power_mode_on)
         {
             switched = true;
-            conf->configure_output(output.id, output.used,
-                                   output.top_left,
-                                   output.current_mode_index,
-                                   output.current_format,
-                                   mir_power_mode_on,
-                                   output.orientation);
+            output.power_mode = mir_power_mode_on;
         }
     });
     if (switched)

=== modified file 'tests/mir_test/display_config_matchers.cpp'
--- tests/mir_test/display_config_matchers.cpp	2014-01-13 06:12:33 +0000
+++ tests/mir_test/display_config_matchers.cpp	2014-02-13 09:52:24 +0000
@@ -176,10 +176,13 @@
             f(output);
     }
 
-    void configure_output(mg::DisplayConfigurationOutputId, bool,
-                          geom::Point, size_t, MirPixelFormat, MirPowerMode,
-                          MirOrientation) override
+    void for_each_output(std::function<void(mg::UserDisplayConfigurationOutput&)> f) override
     {
+        for (auto& output : outputs)
+        {
+            mg::UserDisplayConfigurationOutput user(output);
+            f(user);
+        }
     }
 
 private:

=== modified file 'tests/unit-tests/frontend/test_session_mediator.cpp'
--- tests/unit-tests/frontend/test_session_mediator.cpp	2014-02-07 12:54:45 +0000
+++ tests/unit-tests/frontend/test_session_mediator.cpp	2014-02-13 09:52:24 +0000
@@ -84,7 +84,7 @@
 {
     MOCK_CONST_METHOD1(for_each_card, void(std::function<void(mg::DisplayConfigurationCard const&)>));
     MOCK_CONST_METHOD1(for_each_output, void(std::function<void(mg::DisplayConfigurationOutput const&)>));
-    MOCK_METHOD7(configure_output, void(mg::DisplayConfigurationOutputId, bool, geom::Point, size_t, MirPixelFormat, MirPowerMode, MirOrientation));
+    MOCK_METHOD1(for_each_output, void(std::function<void(mg::UserDisplayConfigurationOutput&)>));
 };
 
 }
@@ -587,14 +587,6 @@
     EXPECT_CALL(*mock_display_selector, active_configuration())
         .InSequence(seq)
         .WillOnce(Return(mt::fake_shared(mock_display_config)));
-    EXPECT_CALL(mock_display_config,
-                configure_output(id0, used0, pt0, mode_index0, format0,
-                                 mir_power_mode_on, mir_orientation_left))
-        .InSequence(seq);
-    EXPECT_CALL(mock_display_config,
-                configure_output(id1, used1, pt1, mode_index1, format1,
-                                 mir_power_mode_off, mir_orientation_inverted))
-        .InSequence(seq);
     EXPECT_CALL(*mock_display_selector, configure(_,_))
         .InSequence(seq);
     EXPECT_CALL(*mock_display_selector, active_configuration())

=== modified file 'tests/unit-tests/graphics/android/test_android_fb.cpp'
--- tests/unit-tests/graphics/android/test_android_fb.cpp	2014-01-13 06:12:33 +0000
+++ tests/unit-tests/graphics/android/test_android_fb.cpp	2014-02-13 09:52:24 +0000
@@ -253,35 +253,27 @@
     mga::AndroidDisplay display(stub_db_factory, mock_display_report);
 
     auto configuration = display.configuration();
-    configuration->for_each_output([&](mg::DisplayConfigurationOutput const& output)
-    {
-        configuration->configure_output(
-            output.id, output.used, output.top_left, output.current_mode_index,
-            output.current_format, mir_power_mode_on, output.orientation);
-    });
-    display.configure(*configuration);
-
-    configuration->for_each_output([&](mg::DisplayConfigurationOutput const& output)
-    {
-        configuration->configure_output(
-            output.id, output.used, output.top_left, output.current_mode_index,
-            output.current_format, mir_power_mode_standby, output.orientation);
-    });
-    display.configure(*configuration);
-
-    configuration->for_each_output([&](mg::DisplayConfigurationOutput const& output)
-    {
-        configuration->configure_output(
-            output.id, output.used, output.top_left, output.current_mode_index,
-            output.current_format, mir_power_mode_off, output.orientation);
-    });
-    display.configure(*configuration);
-
-    configuration->for_each_output([&](mg::DisplayConfigurationOutput const& output)
-    {
-        configuration->configure_output(
-            output.id, output.used, output.top_left, output.current_mode_index,
-            output.current_format, mir_power_mode_suspend, output.orientation);
+    configuration->for_each_output([&](mg::UserDisplayConfigurationOutput& output)
+    {
+        output.power_mode = mir_power_mode_on;
+    });
+    display.configure(*configuration);
+
+    configuration->for_each_output([&](mg::UserDisplayConfigurationOutput& output)
+    {
+        output.power_mode = mir_power_mode_standby;
+    });
+    display.configure(*configuration);
+
+    configuration->for_each_output([&](mg::UserDisplayConfigurationOutput& output)
+    {
+        output.power_mode = mir_power_mode_off;
+    });
+    display.configure(*configuration);
+
+    configuration->for_each_output([&](mg::UserDisplayConfigurationOutput& output)
+    {
+        output.power_mode = mir_power_mode_suspend;
     });
     display.configure(*configuration);
 }

=== modified file 'tests/unit-tests/graphics/mesa/test_cursor.cpp'
--- tests/unit-tests/graphics/mesa/test_cursor.cpp	2014-01-30 09:04:24 +0000
+++ tests/unit-tests/graphics/mesa/test_cursor.cpp	2014-02-13 09:52:24 +0000
@@ -125,10 +125,13 @@
             f(output);
     }
 
-    void configure_output(mg::DisplayConfigurationOutputId, bool,
-                          geom::Point, size_t, MirPixelFormat, MirPowerMode,
-                          MirOrientation) override
+    void for_each_output(std::function<void(mg::UserDisplayConfigurationOutput&)> f) override
     {
+        for (auto& output : outputs)
+        {
+            mg::UserDisplayConfigurationOutput user(output);
+            f(user);
+        }
     }
 
     uint32_t get_kms_connector_id(mg::DisplayConfigurationOutputId id) const override

=== modified file 'tests/unit-tests/graphics/mesa/test_display_multi_monitor.cpp'
--- tests/unit-tests/graphics/mesa/test_display_multi_monitor.cpp	2014-01-29 09:57:46 +0000
+++ tests/unit-tests/graphics/mesa/test_display_multi_monitor.cpp	2014-02-13 09:52:24 +0000
@@ -52,25 +52,20 @@
     void apply_to(mg::DisplayConfiguration& conf)
     {
         conf.for_each_output(
-            [&](mg::DisplayConfigurationOutput const& conf_output)
+            [&](mg::UserDisplayConfigurationOutput& conf_output)
             {
                 if (conf_output.connected && conf_output.modes.size() > 0)
                 {
-                    conf.configure_output(conf_output.id, true,
-                                          geom::Point{0, 0},
-                                          conf_output.preferred_mode_index,
-                                          conf_output.current_format,
-                                          mir_power_mode_on,
-                                          conf_output.orientation);
+                    conf_output.used = true;
+                    conf_output.top_left = geom::Point{0, 0};
+                    conf_output.current_mode_index =
+                        conf_output.preferred_mode_index;
+                    conf_output.power_mode = mir_power_mode_on;
                 }
                 else
                 {
-                    conf.configure_output(conf_output.id, false,
-                                          conf_output.top_left,
-                                          conf_output.current_mode_index,
-                                          conf_output.current_format,
-                                          mir_power_mode_on,
-                                          conf_output.orientation);
+                    conf_output.used = false;
+                    conf_output.power_mode = mir_power_mode_off;
                 }
             });
     }
@@ -84,26 +79,22 @@
         int max_x = 0;
 
         conf.for_each_output(
-            [&](mg::DisplayConfigurationOutput const& conf_output)
+            [&](mg::UserDisplayConfigurationOutput& conf_output)
             {
                 if (conf_output.connected && conf_output.modes.size() > 0)
                 {
-                    conf.configure_output(conf_output.id, true,
-                                          geom::Point{max_x, 0},
-                                          conf_output.preferred_mode_index,
-                                          conf_output.current_format,
-                                          mir_power_mode_on,
-                                          conf_output.orientation);
+                    conf_output.used = true;
+                    conf_output.top_left = geom::Point{max_x, 0};
+                    conf_output.current_mode_index =
+                        conf_output.preferred_mode_index;
+                    conf_output.power_mode = mir_power_mode_on;
+                    conf_output.orientation = mir_orientation_normal;
                     max_x += conf_output.modes[conf_output.preferred_mode_index].size.width.as_int();
                 }
                 else
                 {
-                    conf.configure_output(conf_output.id, false,
-                                          conf_output.top_left,
-                                          conf_output.current_mode_index,
-                                          conf_output.current_format,
-                                          mir_power_mode_on,
-                                          conf_output.orientation);
+                    conf_output.used = false;
+                    conf_output.power_mode = mir_power_mode_off;
                 }
             });
     }
@@ -493,13 +484,12 @@
     auto conf = display->configuration();
 
     conf->for_each_output(
-        [&](mg::DisplayConfigurationOutput const& conf_output)
+        [&](mg::UserDisplayConfigurationOutput& output)
         {
-            conf->configure_output(conf_output.id, false, conf_output.top_left,
-                                   conf_output.preferred_mode_index,
-                                   mir_pixel_format_xrgb_8888,
-                                   mir_power_mode_on,
-                                   conf_output.orientation);
+            output.used = false;
+            output.current_mode_index = output.preferred_mode_index;
+            output.current_format = mir_pixel_format_xrgb_8888;
+            output.power_mode = mir_power_mode_on;
         });
 
     display->configure(*conf);
@@ -532,12 +522,12 @@
     auto conf = display->configuration();
 
     conf->for_each_output(
-        [&](mg::DisplayConfigurationOutput const& conf_output)
+        [&](mg::UserDisplayConfigurationOutput& output)
         {
-            conf->configure_output(conf_output.id, false, conf_output.top_left,
-                                   conf_output.preferred_mode_index,
-                                   mir_pixel_format_xrgb_8888,
-                                   mir_power_mode_on, conf_output.orientation);
+            output.used = false;
+            output.current_mode_index = output.preferred_mode_index;
+            output.current_format = mir_pixel_format_xrgb_8888;
+            output.power_mode = mir_power_mode_on;
         });
 
     display->configure(*conf);

=== modified file 'tests/unit-tests/graphics/mesa/test_overlapping_output_grouping.cpp'
--- tests/unit-tests/graphics/mesa/test_overlapping_output_grouping.cpp	2014-01-13 08:58:20 +0000
+++ tests/unit-tests/graphics/mesa/test_overlapping_output_grouping.cpp	2014-02-13 09:52:24 +0000
@@ -91,9 +91,7 @@
         }
     }
 
-    void configure_output(mg::DisplayConfigurationOutputId, bool,
-                          geom::Point, size_t, MirPixelFormat, MirPowerMode,
-                          MirOrientation) override
+    void for_each_output(std::function<void(mg::UserDisplayConfigurationOutput&)>) override
     {
     }
 

=== modified file 'tests/unit-tests/graphics/nested/test_nested_display_configuration.cpp'
--- tests/unit-tests/graphics/nested/test_nested_display_configuration.cpp	2014-01-13 04:16:45 +0000
+++ tests/unit-tests/graphics/nested/test_nested_display_configuration.cpp	2014-02-13 09:52:24 +0000
@@ -257,13 +257,14 @@
 
 TEST_F(NestedDisplayConfiguration, trivial_configuration_can_be_configured)
 {
-    geom::Point const top_left{10,20};
+    geom::Point const new_top_left{10,20};
     mgn::NestedDisplayConfiguration config(build_trivial_configuration());
 
-    config.configure_output(
-        mg::DisplayConfigurationOutputId(default_output_id), true,
-        top_left, default_current_mode, default_current_output_format,
-        mir_power_mode_on, mir_orientation_normal);
+    config.for_each_output([&](mg::UserDisplayConfigurationOutput& output)
+        {
+            output.used = true;
+            output.top_left = new_top_left;
+        });
 
     MockOutputVisitor ov;
     EXPECT_CALL(ov, f(_)).Times(Exactly(1));
@@ -272,72 +273,15 @@
         {
             ov.f(output);
             EXPECT_EQ(true, output.used);
-            EXPECT_EQ(top_left, output.top_left);
+            EXPECT_EQ(new_top_left, output.top_left);
             EXPECT_EQ(0, output.current_mode_index);
             EXPECT_EQ(default_current_output_format, output.current_format);
         });
 }
 
-TEST_F(NestedDisplayConfiguration, configure_output_rejects_invalid_mode)
-{
-    geom::Point const top_left{10,20};
-    size_t const too_big_mode_index = 1;
-    mgn::NestedDisplayConfiguration config(build_trivial_configuration());
-
-    EXPECT_THROW(
-        {config.configure_output(
-            mg::DisplayConfigurationOutputId(default_output_id),
-            true, top_left, -1, default_current_output_format,
-            mir_power_mode_on, mir_orientation_normal);},
-        std::runtime_error);
-
-    EXPECT_THROW(
-        {config.configure_output(
-            mg::DisplayConfigurationOutputId(default_output_id),
-            true, top_left, too_big_mode_index, default_current_output_format,
-            mir_power_mode_on, mir_orientation_normal);},
-        std::runtime_error);
-}
-
-TEST_F(NestedDisplayConfiguration, configure_output_rejects_invalid_format)
-{
-    geom::Point const top_left{10,20};
-    mgn::NestedDisplayConfiguration config(build_trivial_configuration());
-
-    EXPECT_THROW(
-        {config.configure_output(
-            mg::DisplayConfigurationOutputId(default_output_id),
-            true, top_left, default_current_mode, mir_pixel_format_invalid,
-            mir_power_mode_on, mir_orientation_normal);},
-        std::runtime_error);
-
-    EXPECT_THROW(
-        {config.configure_output(
-            mg::DisplayConfigurationOutputId(default_output_id),
-            true, top_left, default_current_mode, mir_pixel_formats,
-            mir_power_mode_on, mir_orientation_normal);},
-        std::runtime_error);
-}
-
-TEST_F(NestedDisplayConfiguration, configure_output_rejects_invalid_output)
-{
-    geom::Point const top_left{10,20};
-    mgn::NestedDisplayConfiguration config(build_trivial_configuration());
-
-    EXPECT_THROW(
-        {config.configure_output(
-             mg::DisplayConfigurationOutputId(default_output_id+1), true,
-             top_left, default_current_mode, default_current_output_format,
-             mir_power_mode_on, mir_orientation_normal);},
-        std::runtime_error);
-
-    EXPECT_THROW(
-        {config.configure_output(
-             mg::DisplayConfigurationOutputId(default_output_id-1), true,
-             top_left, default_current_mode, default_current_output_format,
-             mir_power_mode_on, mir_orientation_normal);},
-        std::runtime_error);
-}
+// Validation tests once stood here. They've now been replaced by more
+// portable validation logic which can be found in:
+// TEST(DisplayConfiguration, ...
 
 TEST_F(NestedDisplayConfiguration, non_trivial_configuration_has_two_cards)
 {
@@ -365,8 +309,16 @@
     geom::Point const top_left{100,200};
     mgn::NestedDisplayConfiguration config(build_non_trivial_configuration());
 
-    config.configure_output(id, true, top_left, 1, mir_pixel_format_argb_8888,
-                            mir_power_mode_on, mir_orientation_normal);
+    config.for_each_output([&](mg::UserDisplayConfigurationOutput& output)
+        {
+            if (output.id == id)
+            {
+                output.used = true;
+                output.top_left = top_left;
+                output.current_mode_index = 1;
+                output.current_format = mir_pixel_format_argb_8888;
+            }
+        });
 
     MockOutputVisitor ov;
     EXPECT_CALL(ov, f(_)).Times(Exactly(3));

=== modified file 'tests/unit-tests/graphics/test_default_display_configuration_policy.cpp'
--- tests/unit-tests/graphics/test_default_display_configuration_policy.cpp	2014-01-13 06:12:33 +0000
+++ tests/unit-tests/graphics/test_default_display_configuration_policy.cpp	2014-02-13 09:52:24 +0000
@@ -55,15 +55,20 @@
         f({DisplayConfigurationCardId{1}, max_simultaneous_outputs});
     }
 
-    void for_each_output(std::function<void(DisplayConfigurationOutput const&)> f) const
+    void for_each_output(std::function<void(DisplayConfigurationOutput const&)> f) const override
     {
         for (auto const& output : outputs)
             f(output);
     }
 
-    MOCK_METHOD7(configure_output, void(DisplayConfigurationOutputId, bool,
-                                        Point, size_t, MirPixelFormat,
-                                        MirPowerMode, MirOrientation));
+    void for_each_output(std::function<void(UserDisplayConfigurationOutput&)> f)
+    {
+        for (auto& output : outputs)
+        {
+            UserDisplayConfigurationOutput user(output);
+            f(user);
+        }
+    }
 
     static const size_t max_simultaneous_outputs_all{std::numeric_limits<size_t>::max()};
 private:
@@ -163,24 +168,21 @@
     DefaultDisplayConfigurationPolicy policy;
     MockDisplayConfiguration conf{create_default_configuration()};
 
+    policy.apply_to(conf);
+
     conf.for_each_output([&conf](DisplayConfigurationOutput const& output)
     {
         if (output.connected && output.modes.size() > 0)
         {
-            EXPECT_CALL(conf, configure_output(output.id, true, Point(),
-                                               output.preferred_mode_index,
-                                               _, _, _));
+            EXPECT_TRUE(output.used);
+            EXPECT_EQ(Point(), output.top_left);
+            EXPECT_EQ(output.preferred_mode_index, output.current_mode_index);
         }
         else
         {
-            EXPECT_CALL(conf, configure_output(output.id, false,
-                                               output.top_left,
-                                               output.current_mode_index,
-                                               _, _, _));
+            EXPECT_FALSE(output.used);
         }
     });
-
-    policy.apply_to(conf);
 }
 
 TEST(DefaultDisplayConfigurationPolicyTest, default_policy_is_power_mode_on)
@@ -190,13 +192,12 @@
     DefaultDisplayConfigurationPolicy policy;
     MockDisplayConfiguration conf{create_default_configuration()};
 
-    conf.for_each_output([&conf](DisplayConfigurationOutput const& output)
+    policy.apply_to(conf);
+
+    conf.for_each_output([](DisplayConfigurationOutput const& output)
     {
-        EXPECT_CALL(conf, configure_output(output.id, _, _, _, _,
-                                           mir_power_mode_on, _));
+        EXPECT_EQ(mir_power_mode_on, output.power_mode);
     });
-
-    policy.apply_to(conf);
 }
 
 TEST(DefaultDisplayConfigurationPolicyTest, default_orientation_is_normal)
@@ -208,11 +209,8 @@
 
     conf.for_each_output([&conf](DisplayConfigurationOutput const& output)
     {
-        EXPECT_CALL(conf, configure_output(output.id, _, _, _, _, _,
-                                           mir_orientation_normal));
+        EXPECT_EQ(mir_orientation_normal, output.orientation);
     });
-
-    policy.apply_to(conf);
 }
 
 TEST(DefaultDisplayConfigurationPolicyTest, does_not_enable_more_outputs_than_supported)
@@ -223,19 +221,16 @@
     DefaultDisplayConfigurationPolicy policy;
     MockDisplayConfiguration conf{create_default_configuration(max_simultaneous_outputs)};
 
-    size_t output_count{0};
-    conf.for_each_output([&output_count](DisplayConfigurationOutput const&)
+    policy.apply_to(conf);
+
+    size_t used_count{0};
+    conf.for_each_output([&used_count](DisplayConfigurationOutput const& output)
     {
-        ++output_count;
+        if (output.used)
+            ++used_count;
     });
 
-    EXPECT_CALL(conf, configure_output(_, true, _, _, _, _, _))
-        .Times(AtMost(max_simultaneous_outputs));
-
-    EXPECT_CALL(conf, configure_output(_, false, _, _, _, _, _))
-        .Times(AtLeast(output_count - max_simultaneous_outputs));
-
-    policy.apply_to(conf);
+    EXPECT_GE(max_simultaneous_outputs, used_count);
 }
 
 TEST(DefaultDisplayConfigurationPolicyTest, prefer_opaque_over_alpha)
@@ -245,9 +240,12 @@
     DefaultDisplayConfigurationPolicy policy;
     MockDisplayConfiguration pick_xrgb{ { connected_with_rgba_and_xrgb() } };
 
-    EXPECT_CALL(pick_xrgb, configure_output(_, true, _, _,
-                                            mir_pixel_format_xrgb_8888, _, _));
     policy.apply_to(pick_xrgb);
+
+    pick_xrgb.for_each_output([](DisplayConfigurationOutput const& output)
+    {
+        EXPECT_EQ(mir_pixel_format_xrgb_8888, output.current_format);
+    });
 }
 
 TEST(DefaultDisplayConfigurationPolicyTest, preserve_opaque_selection)
@@ -257,9 +255,12 @@
     DefaultDisplayConfigurationPolicy policy;
     MockDisplayConfiguration keep_bgr{ { connected_with_xrgb_bgr() } };
 
-    EXPECT_CALL(keep_bgr, configure_output(_, true, _, _,
-                                           mir_pixel_format_bgr_888, _, _));
     policy.apply_to(keep_bgr);
+
+    keep_bgr.for_each_output([](DisplayConfigurationOutput const& output)
+    {
+        EXPECT_EQ(mir_pixel_format_bgr_888, output.current_format);
+    });
 }
 
 TEST(DefaultDisplayConfigurationPolicyTest, accept_transparency_when_only_option)
@@ -269,8 +270,11 @@
     DefaultDisplayConfigurationPolicy policy;
     MockDisplayConfiguration pick_rgba{ { default_output(DisplayConfigurationOutputId{15}) } };
 
-    EXPECT_CALL(pick_rgba, configure_output(_, true, _, _,
-                                            mir_pixel_format_abgr_8888, _, _));
     policy.apply_to(pick_rgba);
+
+    pick_rgba.for_each_output([](DisplayConfigurationOutput const& output)
+    {
+        EXPECT_EQ(mir_pixel_format_abgr_8888, output.current_format);
+    });
 }
 

=== modified file 'tests/unit-tests/graphics/test_display.cpp'
--- tests/unit-tests/graphics/test_display.cpp	2014-01-13 06:12:33 +0000
+++ tests/unit-tests/graphics/test_display.cpp	2014-02-13 09:52:24 +0000
@@ -17,6 +17,7 @@
  */
 
 #include "mir/graphics/display.h"
+#include "mir/graphics/display_configuration.h"
 #include "mir/graphics/gl_context.h"
 #include "mir/options/program_option.h"
 
@@ -38,6 +39,7 @@
 #include "mir/graphics/null_display_report.h"
 
 #include <gtest/gtest.h>
+#include <gmock/gmock.h>
 
 namespace mg = mir::graphics;
 namespace mtd = mir::test::doubles;
@@ -96,6 +98,38 @@
 #endif
 };
 
+namespace
+{
+
+class MockDisplayConfiguration : public mg::DisplayConfiguration
+{
+public:
+    MOCK_CONST_METHOD1(for_each_card,
+        void(std::function<void(mg::DisplayConfigurationCard const&)>));
+    MOCK_CONST_METHOD1(for_each_output,
+        void(std::function<void(mg::DisplayConfigurationOutput const&)>));
+    MOCK_METHOD1(for_each_output,
+        void(std::function<void(mg::UserDisplayConfigurationOutput&)>));
+    MOCK_CONST_METHOD0(valid, bool());
+};
+
+}
+
+TEST_F(DisplayTest, configure_disallows_invalid_configuration)
+{
+    using namespace testing;
+    auto display = create_display();
+    MockDisplayConfiguration config;
+
+    EXPECT_CALL(config, valid())
+        .WillOnce(Return(false));
+
+    EXPECT_THROW({display->configure(config);}, std::logic_error);
+
+    // Determining what counts as a valid configuration is a much trickier
+    // platform-dependent exercise, so won't be tested here.
+}
+
 TEST_F(DisplayTest, gl_context_make_current_uses_shared_context)
 {
     using namespace testing;

=== modified file 'tests/unit-tests/graphics/test_display_configuration.cpp'
--- tests/unit-tests/graphics/test_display_configuration.cpp	2014-01-13 06:46:21 +0000
+++ tests/unit-tests/graphics/test_display_configuration.cpp	2014-02-13 09:52:24 +0000
@@ -266,3 +266,44 @@
     out.orientation = mir_orientation_right;
     EXPECT_EQ(swapped, out.extents());
 }
+
+TEST(DisplayConfiguration, default_valid)
+{
+    mg::DisplayConfigurationOutput out = tmpl_output;
+
+    EXPECT_TRUE(out.valid());
+}
+
+TEST(DisplayConfiguration, used_and_disconnected_invalid)
+{
+    mg::DisplayConfigurationOutput out = tmpl_output;
+
+    out.used = true;
+    out.connected = false;
+
+    EXPECT_FALSE(out.valid());
+}
+
+TEST(DisplayConfiguration, unsupported_format_invalid)
+{
+    mg::DisplayConfigurationOutput out = tmpl_output;
+    out.current_format = mir_pixel_format_xbgr_8888;
+
+    EXPECT_FALSE(out.valid());
+}
+
+TEST(DisplayConfiguration, unsupported_current_mode_invalid)
+{
+    mg::DisplayConfigurationOutput out = tmpl_output;
+    out.current_mode_index = 123;
+
+    EXPECT_FALSE(out.valid());
+}
+
+TEST(DisplayConfiguration, unsupported_preferred_mode_invalid)
+{
+    mg::DisplayConfigurationOutput out = tmpl_output;
+    out.preferred_mode_index = 456;
+
+    EXPECT_FALSE(out.valid());
+}

