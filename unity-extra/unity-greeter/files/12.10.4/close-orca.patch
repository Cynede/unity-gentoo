Index: unity-greeter-12.10.4/src/menubar.vala
===================================================================
--- unity-greeter-12.10.4.orig/src/menubar.vala	2012-10-08 00:22:43.773961218 -0400
+++ unity-greeter-12.10.4/src/menubar.vala	2012-10-08 08:55:30.455021424 -0400
@@ -132,6 +132,7 @@
     private Gtk.CheckMenuItem high_contrast_item;
     private Gtk.Label keyboard_label = null;
     private Pid keyboard_pid = 0;
+    private Pid reader_pid = 0;
     private Gtk.CheckMenuItem onscreen_keyboard_item;
 
     construct
@@ -170,17 +171,23 @@
         UnityGreeter.singleton.starting_session.connect (cleanup);
     }
 
-    public void cleanup ()
+    private void close_pid (ref Pid pid)
     {
-        if (keyboard_pid != 0)
+        if (pid != 0)
         {
-            Posix.kill (keyboard_pid, Posix.SIGTERM);
+            Posix.kill (pid, Posix.SIGTERM);
             int status;
-            Posix.waitpid (keyboard_pid, out status, 0);
-            keyboard_pid = 0;
+            Posix.waitpid (pid, out status, 0);
+            pid = 0;
         }
     }
 
+    public void cleanup ()
+    {
+        close_pid (ref keyboard_pid);
+        close_pid (ref reader_pid);
+    }
+
     public override void get_preferred_height (out int min, out int nat)
     {
         min = HEIGHT;
@@ -468,17 +475,26 @@
         UGSettings.set_boolean (UGSettings.KEY_SCREEN_READER, item.active);
 
         /* Hardcoded orca: */
-        try
-        {
-            if (item.active)
-                Process.spawn_command_line_async ("orca --replace --no-setup --disable splash-window,main-window");
-            else
-                Process.spawn_command_line_async ("orca --quit");
-        }
-        catch (Error e)
+        if (item.active)
         {
-            warning ("Failed to run Orca: %s", e.message);
+            try
+            {
+                string[] argv;
+                Shell.parse_argv ("orca --replace --no-setup --disable splash-window,main-window", out argv);
+                Process.spawn_async (null,
+                                     argv,
+                                     null,
+                                     SpawnFlags.SEARCH_PATH,
+                                     null,
+                                     out reader_pid);
+            }
+            catch (Error e)
+            {
+                warning ("Failed to run Orca: %s", e.message);
+            }
         }
+        else
+            close_pid (ref reader_pid);
     }
 
     private uint get_indicator_index (Indicator.Object object)
